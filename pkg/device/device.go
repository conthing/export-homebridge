package device

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"
)

var ErrUnknownType = errors.New("ErrUnknownType")

//AutoGenerated means the construction of config.json
type AutoGenerated struct {
	Description string       `json:"description"`
	Bridge      BridgeStruct `json:"bridge"`
	Platforms   []Platform   `json:"platforms"`
}

type BridgeStruct struct {
	Serialnumber string `json:"serialNumber"`
	Pin          string `json:"pin"`
	Port         int    `json:"port"`
	Name         string `json:"name"`
	Model        string `json:"model"`
	Manufacturer string `json:"manufacturer"`
	Username     string `json:"username"`
	Repport      string `json:"repport"`
}

type Platform struct {
	Accessories []Accessary `json:"accessories"`
	Name        string      `json:"name"`
	ConfigPath  string      `json:"configPath"`
	Platform    string      `json:"platform"`
}

type Accessary struct {
	Service   string `json:"service"`
	Name      string `json:"name"`
	ProxyID   string `json:"proxy_id"`
	Accessory string `json:"accessory"`
}

//Envelope means the data transformed from coredata
type Envelope []struct {
	Name    string
	ID      string
	Profile Profile
}

type Profile struct {
	Name     string
	Commands []Commands
}

//Command means control
type Commands struct {
	ID   string
	Name string
}

type Accessarysender struct {
	Service  string
	Name     string
	ID       string
	Commands []Commands
}

var Accessaries []Accessary
var Accessarysenders []Accessarysender
var Pinbuffer bytes.Buffer

func Decode(jsonStr []byte) {
	var env Envelope

	err := json.Unmarshal([]byte(jsonStr), &env)
	if err != nil {
		log.Println(err)
		return
	}
	// for the love of Gopher DO NOT DO THIS
	for i := range env {

		item := env[i]

		var accessary Accessary
		var accessarysender Accessarysender

		accessary.Name = item.Name
		accessary.ProxyID = item.ID
		accessary.Accessory = "Control4"


		accessarysender.Name = item.Name
		accessarysender.ID = item.ID
		accessarysender.Service = item.Profile.Name
		command := accessarysender.Commands
		for i := 0; i < len(item.Profile.Commands); i++ {
			command = append(command, item.Profile.Commands[i])
		}
		accessarysender.Commands = command


switch item.Profile.Name{
case "Light":
	accessary.Service = "Lightbulb"
	Accessaries = append(Accessaries, accessary)
	Accessarysenders = append(Accessarysenders, accessarysender) //store deviceid and commandid

case "Curtain":
	accessary.Service  = "WindowCovering"
	Accessaries = append(Accessaries, accessary)
	Accessarysenders = append(Accessarysenders, accessarysender) //store deviceid and commandid
default:
	fmt.Println("不存相应设备")

}

	}
	configdata := createConfigData(Accessaries)
	b, _ := json.MarshalIndent(configdata, "", " ") //变成json字符串

	err = ioutil.WriteFile("/root/.homebridge/config.json", b, os.ModeAppend) //create config.json
	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println(string(b))
	return
}

func createConfigData(accessaries []Accessary) AutoGenerated {
	rand.Seed(time.Now().UnixNano())
	Pinbuffer.WriteString("0" + strconv.Itoa(rand.Intn(90)+10))
	Pinbuffer.WriteString("-" + strconv.Itoa(rand.Intn(90)+10))
	Pinbuffer.WriteString("-" + strconv.Itoa(rand.Intn(900)+100))
	fmt.Println(Pinbuffer.String())
	var sernum bytes.Buffer
	sernum.WriteString(strconv.Itoa(rand.Intn(100)))
	sernum.WriteString("." + strconv.Itoa(rand.Intn(100)))
	sernum.WriteString("." + strconv.Itoa(rand.Intn(100)))
	sernum.WriteString("." + strconv.Itoa(rand.Intn(100)))
	fmt.Println(sernum.String())
	configdata := AutoGenerated{
		Description: "This is an inSona plugin configuration file",
		Bridge: BridgeStruct{
			Serialnumber: sernum.String(),
			Pin:          Pinbuffer.String(),
			Port:         51826,
			Name:         "homebridge-0",
			Model:        "homebridge-inSona",
			Manufacturer: "inSona",
			Username:     "CE:25:3D:E4:CE:30",
			Repport:      "tcp://127.0.0.1:10007",
		},
		Platforms: []Platform{
			Platform{
				Accessories: accessaries,
				Name:        "Control4",
				ConfigPath:  "/root/.homebridge/config.json",
				Platform:    "Control4",
			},
		},
	}
	return configdata
}

//serialnumber,pin,username create auto
