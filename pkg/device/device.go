package device

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/conthing/export-homebridge/pkg/errorHandle"
	"io/ioutil"
	"log"
	"net"
	"os"
	"strconv"
	"strings"
)

//var ErrUnknownType = errors.New("ErrUnknownType")

//AutoGenerated means the construction of config.json
type AutoGenerated struct {
	Description string       `json:"description"`
	Bridge      BridgeStruct `json:"bridge"`
	Platforms   []Platform   `json:"platforms"`
}

type BridgeStruct struct {
	Serialnumber string `json:"serialNumber"`
	Pin          string `json:"pin"`
	Port         int    `json:"port"`
	Name         string `json:"name"`
	Model        string `json:"model"`
	Manufacturer string `json:"manufacturer"`
	Username     string `json:"username"`
	Repport      string `json:"repport"`
}

type Platform struct {
	Accessories []Accessary `json:"accessories"`
	Name        string      `json:"name"`
	ConfigPath  string      `json:"configPath"`
	Platform    string      `json:"platform"`
}

type Accessary struct {
	Service   string `json:"service"`
	Name      string `json:"name"`
	ProxyID   string `json:"proxy_id"`
	Accessory string `json:"accessory"`
}

//Envelope means the data transformed from coredata
type Envelope []struct {
	Name    string
	ID      string
	Profile Profile
}

type Profile struct {
	Name     string
	Commands []Commands
}

//Command means control
type Commands struct {
	ID   string
	Name string
}

type Accessarysender struct {
	Service  string
	Name     string
	ID       string
	Commands []Commands
}

var Accessaries []Accessary
var Accessarysenders []Accessarysender
var Pincode string

func Decode(jsonStr []byte) (b []byte, err error) {
	var env Envelope

	err = json.Unmarshal([]byte(jsonStr), &env)
	if err != nil {
		log.Println(err)
		return nil, errorHandle.ErrUnmarshalFail
	}
	// for the love of Gopher DO NOT DO THIS
	for i := range env {

		item := env[i]

		var accessary Accessary
		var accessarysender Accessarysender

		accessary.Name = item.Name
		accessary.ProxyID = item.ID
		accessary.Accessory = "Control4"

		accessarysender.Name = item.Name
		accessarysender.ID = item.ID
		accessarysender.Service = item.Profile.Name
		command := accessarysender.Commands
		for i := 0; i < len(item.Profile.Commands); i++ {
			if item.Profile.Commands[i].Name == "brightness" || item.Profile.Commands[i].Name == "percent" {
				command = append(command, item.Profile.Commands[i])
			}
		}
		accessarysender.Commands = command

		switch item.Profile.Name {
		case "Light":
			accessary.Service = "Lightbulb"
			Accessaries = append(Accessaries, accessary)
			Accessarysenders = append(Accessarysenders, accessarysender) //store deviceid and commandid

		case "Curtain":
			accessary.Service = "WindowCovering"
			Accessaries = append(Accessaries, accessary)
			Accessarysenders = append(Accessarysenders, accessarysender) //store deviceid and commandid
		default:
			fmt.Println("不存在相应设备")

		}

	}
	configdata, err := createConfigData(Accessaries)
	if err != nil {
		log.Fatal(err)
	}
	b, err = json.MarshalIndent(configdata, "", " ") //变成json字符串
	if err != nil {
		return nil, errorHandle.ErrMarshalFail
	}

	err = ioutil.WriteFile("/root/.homebridge/config.json", b, os.ModeAppend) //create config.json
	if err != nil {
		fmt.Println(err)
		return b, errorHandle.ErrWriteFail
	}

	return b, nil
}

func createConfigData(accessaries []Accessary) (configdata AutoGenerated, err error) {
	mac := mac()
	pinstring := strings.Split(mac, ":")
	pinnum := make([]int, 6)
	if len(pinstring) == 6 {
		for i, pin := range pinstring {
			n, err := strconv.ParseUint(pin, 16, 8)
			if err != nil {
				return configdata, errorHandle.ErrParseFail
			} else {
				pinnum[i] = int(n)
			}
		}
	} else {
		err = errorHandle.ErrMacInvalid
		return
	}
	username := fmt.Sprintf("%02X:%02X:%02X:%02X:%02X:%02X", pinnum[5], pinnum[4], pinnum[3], pinnum[2], pinnum[1], pinnum[0])

	Pincode = fmt.Sprintf("%03d-%02d-%03d", pinnum[5]%90+10, pinnum[4]%90+10, pinnum[3]+100)
	sernum := fmt.Sprintf("%02d.%02d.%02d.%02d", pinnum[3]%100, pinnum[2]%100, pinnum[1]%100, pinnum[0]%100)

	configdata = AutoGenerated{
		Description: "This is an inSona plugin configuration file",
		Bridge: BridgeStruct{
			Serialnumber: sernum,
			Pin:          Pincode,
			Port:         51826,
			Name:         "homebridge-0",
			Model:        "homebridge-inSona",
			Manufacturer: "inSona",
			Username:     username,
			Repport:      "tcp://127.0.0.1:9999",
		},
		Platforms: []Platform{
			{
				Accessories: accessaries,
				Name:        "Control4",
				ConfigPath:  "/root/.homebridge/config.json",
				Platform:    "Control4",
			},
		},
	}
	return
}

func mac() (mac string) {
	// 获取本机的MAC地址
	interfaces, err := net.Interfaces()
	if err != nil {
		panic("Poor soul, here is what you got: " + err.Error())
	}
	for _, inter := range interfaces {
		//fmt.Println(inter.Name)
		mac = strings.ToUpper(inter.HardwareAddr.String()) //获取本机MAC地址
		if mac != "" {
			return
		}
	}
	return
}

//serialnumber,pin,username create auto
